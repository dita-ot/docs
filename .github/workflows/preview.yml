# This workflow will build PR changes and push to website repo

name: DITA-OT CI for website preview

on:
  pull_request:
    branches: [develop]
    types: [opened, synchronize, reopened]

jobs:
  preview:
    if: github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest
    env:
      DITA_OT_VERSION: '3.5.1'
    steps:
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Set Node.js version 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Set up Netflify
        uses: actions/checkout@master
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6

      - name: Checkout docs
        uses: actions/checkout@v2
      - name: Checkout website
        uses: actions/checkout@v2
        with:
          repository: dita-ot/website
          path: website

      - name: Download website plug-in
        run: |
          curl -sL https://github.com/dita-ot/org.dita-ot.html/archive/master.zip -o org.dita-ot.html.zip
      - name: Cache stable DITA-OT
        uses: actions/cache@v2
        with:
          path: dita-ot-${{ env.DITA_OT_VERSION }}
          key: ${{ runner.os }}-dita-ot-${{ env.DITA_OT_VERSION }}
      - name: Download stable DITA-OT
        run: |
          if [ ! -d "dita-ot-${{ env.DITA_OT_VERSION }}" ]; then
            curl -sL https://github.com/dita-ot/dita-ot/releases/download/${{ env.DITA_OT_VERSION }}/dita-ot-${{ env.DITA_OT_VERSION }}.zip -o dita-ot-${{ env.DITA_OT_VERSION }}.zip
            unzip dita-ot-${{ env.DITA_OT_VERSION }}.zip
          else
            echo "Use cached dita-ot-${{ env.DITA_OT_VERSION }}"
          fi
          dita-ot-${{ env.DITA_OT_VERSION }}/bin/dita install org.dita-ot.html.zip --force -v

      - name: Get develop DITA-OT ETag
        run: |
          curl -sI https://s3-eu-west-1.amazonaws.com/dita-ot/dita-ot-develop.zip | grep -F ETag | cut -d'"' -f 2 > dita-ot-develop.etag
      - name: Cache develop DITA-OT
        uses: actions/cache@v2
        with:
          path: dita-ot-develop
          key: ${{ runner.os }}-dita-ot-develop-${{ hashFiles('dita-ot-develop.etag') }}
          restore-keys: |
            ${{ runner.os }}-dita-ot-develop-
      - name: Download develop DITA-OT
        run: |
          if [ ! -d "dita-ot-develop" ]; then
            curl -sL https://s3-eu-west-1.amazonaws.com/dita-ot/dita-ot-develop.zip -o dita-ot-develop.zip
            unzip dita-ot-develop.zip -d dita-ot-develop
          else
            echo "Use cached dita-ot-develop"
          fi
          echo "::set-env name=DITA_OT_DEV::$(find dita-ot-develop -name 'dita-ot-*+*' -type d | head -1)"

      - name: Run DITA-OT
        run: |
          ./gradlew site -PditaHome=${{ github.workspace }}/dita-ot-${{ env.DITA_OT_VERSION }} -PoutputDir=${{ github.workspace }}/website/dev -PditaHomeSrc=${{ env.DITA_OT_DEV }} --info --stacktrace --no-daemon

      - name: Cache NPM
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Build website
        run: |
          cd ${{ github.workspace }}/website && npm ci && npm run install
          cd ${{ github.workspace }}
          echo "::set-env name=PR_ID::$(echo $GITHUB_REF |  cut -d'/' -f 3 )"
          # Move website to root
          mv -f ${{ github.workspace }}/website/* ${{ github.workspace }}/
          rm -fr build

      #- name: Run Jekyll
      #  uses: helaili/jekyll-action@2.0.1
      #  with:
      #    jekyll_src: /github/workspace/website

      - name: Cache gems
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: Install Jekyll
        run: |
          bundle config path vendor/bundle
          bundle install
      - name: Run Jekyll
        run: |
          bundle exec jekyll build

      - name: Deploy to Netlify
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir _site --alias "preview-pr-${{ env.PR_ID }}"
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: Create status
        uses: Sibz/github-status-action@v1
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.event.pull_request.head.sha }}
          # may have to use $GITHUB_REPOSITORY and split it into repository and owner by /
          context: 'Preview'
          description: 'Website preview generated'
          state: 'success'
          target_url: 'https://preview-pr-${{ env.PR_ID }}--dita-ot.netlify.app'
