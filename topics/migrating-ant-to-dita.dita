<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA General Task//EN" "generalTask.dtd">
<!--  This file is part of the DITA Open Toolkit project. See the accompanying LICENSE file for applicable license.  -->
<task id="migrating-ant-to-dita">
  <title>Migrating Ant builds to the <cmdname>dita</cmdname> command</title>
  <titlealts>
    <navtitle>Migrating Ant builds</navtitle>
  </titlealts>
  <shortdesc>
    <ph id="ant-caveat">DITA-OT still supports Ant builds, but
      <xref keyref="build-using-dita-command">the <cmdname>dita</cmdname> command</xref> offers a simpler command
      interface, sets all required environment variables, and allows you to run DITA-OT without setting up anything
      beforehand.</ph></shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Ant
          <indexterm><xmlelement>exec</xmlelement></indexterm></indexterm>
        <indexterm>Ant
          <indexterm><xmlelement>dita-cmd</xmlelement></indexterm>
          <indexterm><cmdname>dita</cmdname> command, benefits of</indexterm></indexterm>
        <indexterm>dita-cmd</indexterm>
        <indexterm><cmdname>dita</cmdname> command
          <indexterm>migrating Ant scripts</indexterm></indexterm>
        <indexterm>classpath
          <indexterm><cmdname>dita</cmdname> command</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <taskbody>
    <context>
      <p>Building output with the <cmdname>dita</cmdname> command is often easier than using Ant. In particular, you can
        use
        <xref keyref="using-dita-properties-file"><filepath>.properties</filepath> files</xref> to specify sets of
        parameters for each build, or create a
        <xref keyref="using-project-files">project file</xref> that defines multiple deliverables at once.</p>
      <p>You can include the <cmdname>dita</cmdname> command in shell scripts to perform multiple builds.</p>
      <note type="tip">Add the absolute path for the <filepath>bin</filepath> folder of the DITA-OT installation
        directory to the
        <xref keyref="PATH"/> to run the <cmdname>dita</cmdname> command from any location on the file system without
        typing the path.</note>
    </context>
    <steps>
      <step>
        <cmd>In your Ant build file, identify the properties set in each build target.</cmd>
        <info>
          <note>Some build parameters might be specified as properties of the project as a whole. You can refer to a
            build log to see a list of all properties that were set for the build.</note>
        </info>
      </step>
      <step>
        <cmd>Create a <filepath>.properties</filepath> file for each build and specify the needed build parameters, one
          per line, in the format <codeph>name = value</codeph>.</cmd>
      </step>
      <step>
        <cmd>Use the <cmdname>dita</cmdname> command to perform each build, referencing your
            <filepath>.properties</filepath> with the <parmname>--propertyfile</parmname>=<varname>file</varname>
          option.</cmd>
      </step>
    </steps>
    <example>
      <title>Example: Ant build</title>
      <p>Prior to DITA-OT 2.0, an Ant build like this was typically used to define the properties for each target.</p>
      <p>Sample build file: <filepath>build-chm-pdf.xml</filepath>
        <codeblock
          outputclass="language-xml normalize-space show-line-numbers show-whitespace"
        >&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;project name="build-chm-pdf" default="all" basedir=".">
  &lt;property name="dita.dir" location="${basedir}/../../.."/>
  &lt;target name="all" description="build CHM and PDF" depends="chm,pdf"/>
  &lt;target name="chm" description="build CHM">
    &lt;ant antfile="${dita.dir}/build.xml">
      &lt;property name="args.input" location="../sequence.ditamap"/>
      &lt;property name="transtype" value="htmlhelp"/>
      &lt;property name="output.dir" location="../out/chm"/>
      &lt;property name="args.gen.task.lbl" value="YES"/>
    &lt;/ant>
  &lt;/target>
  &lt;target name="pdf" description="build PDF">
    &lt;ant antfile="${dita.dir}/build.xml">
      &lt;property name="args.input" location="../taskbook.ditamap"/>
      &lt;property name="transtype" value="pdf"/>
      &lt;property name="output.dir" location="../out/pdf"/>
      &lt;property name="args.gen.task.lbl" value="YES"/>
      &lt;property name="args.rellinks" value="nofamily"/>
    &lt;/ant>
  &lt;/target>
&lt;/project></codeblock></p></example>
    <example>
      <title>Example: <filepath>.properties</filepath> files with <cmdname>dita</cmdname> command</title>
      <p>The following <filepath>.properties</filepath> files and <cmdname>dita</cmdname> commands are equivalent to the
        example Ant build.</p>
      <p>Sample <filepath>.properties</filepath> file: <filepath conkeyref="conref-task/samples-dir"/><filepath
        >/properties/chm.properties</filepath></p>
      <p>
        <codeblock outputclass="language-properties normalize-space show-line-numbers show-whitespace"><coderef
            href="../samples/properties/chm.properties"
          /></codeblock></p>
      <p>Sample <filepath>.properties</filepath> file: <filepath conkeyref="conref-task/samples-dir"/><filepath
        >/properties/pdf.properties</filepath></p>
      <p>
        <codeblock outputclass="language-properties normalize-space show-line-numbers show-whitespace"><coderef
            href="../samples/properties/pdf.properties"
          /></codeblock></p>
      <p>Sample <cmdname>dita</cmdname> command sequence:</p>
      <codeblock><cmdname>dita</cmdname> <parmname>--input</parmname>=<filepath>sequence.ditamap</filepath> <parmname
        >--format</parmname>=<option>htmlhelp</option> \
     <parmname>--propertyfile</parmname>=<filepath>properties/chm.properties</filepath>
<cmdname>dita</cmdname> <parmname>--input</parmname>=<filepath>taskbook.ditamap</filepath> <parmname
        >--format</parmname>=<option>pdf</option> \
     <parmname>--propertyfile</parmname>=<filepath>properties/pdf.properties</filepath></codeblock>
    </example>
    <example>
      <title>Example: Call the <cmdname>dita</cmdname> command from an Ant build</title>
      <p>In some cases, you might still want to use an Ant build to implement some pre- or post-processing steps, but
        also want the convenience of using the <cmdname>dita</cmdname> command with <filepath>.properties</filepath>
        files to define the parameters for each build. This can be accomplished with Antâ€™s <xmlelement>exec</xmlelement>
        task.</p>
      <p>This example defines a <xmlelement>dita-cmd</xmlelement> Ant macro:</p>
      <p>
        <codeblock
          outputclass="language-xml normalize-space show-line-numbers show-whitespace"
        >&lt;macrodef name="dita-cmd">
  &lt;attribute name="input"/>
  &lt;attribute name="format"/>
  &lt;attribute name="propertyfile"/>
  &lt;sequential>
    &lt;!-- For Unix run the DITA executable-->
    &lt;exec taskname="dita-cmd" executable="${dita.dir}/bin/dita" osfamily="unix" failonerror="true">
      &lt;arg value="--input"/>
      &lt;arg value="@{input}"/>
      &lt;arg value="--format"/>
      &lt;arg value="@{format}"/>
      &lt;arg value="--propertyfile"/>
      &lt;arg value="@{propertyfile}"/>
    &lt;/exec>
    &lt;!-- For Windows run DITA from a DOS command -->
    &lt;exec taskname="dita-cmd" dir="${dita.dir}/bin" executable="cmd" osfamily="windows" failonerror="true">
      &lt;arg value="/C"/>
      &lt;arg value="dita --input @{input} --format @{format} --propertyfile=@{propertyfile}"/>
    &lt;/exec>
  &lt;/sequential>
&lt;/macrodef></codeblock></p>
      <p>You can use this macro in your Ant build to call the <cmdname>dita</cmdname> command and pass the
          <parmname>input</parmname>, <parmname>format</parmname> and <parmname>propertyfile</parmname> parameters as
        follows:
        <codeblock
          outputclass="language-xml"
        >&lt;dita-cmd input="sample.ditamap" format="pdf" propertyfile="sample.properties"/></codeblock>
      </p>
      <p>This approach allows you to use Ant builds to perform additional tasks at build time while allowing the
          <cmdname>dita</cmdname> command to set the classpath and ensure that all necessary JAR libraries are
        available.</p>
      <note>The attributes defined in the Ant macro are required and must be supplied each time the task is run. To set
        optional parameters in one build (but not another), use different <filepath>.properties</filepath> files for
        each build.</note>
      <p>Sample build file: <filepath>build-chm-pdf-hybrid.xml</filepath></p>
      <p>
        <codeblock
          outputclass="language-xml normalize-space show-line-numbers show-whitespace"
        >&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;project name="build-chm-pdf-hybrid" default="all" basedir=".">
  &lt;description>An Ant build that calls the dita command&lt;/description>
  &lt;include file="dita-cmd.xml"/>&lt;!-- defines the &lt;dita-cmd> macro -->
  &lt;target name="all" depends="pre,main,post"/>
  &lt;target name="pre">
    &lt;description>Pre-processing steps&lt;/description>
  &lt;/target>
  &lt;target name="main">
    &lt;description>Build the CHM and PDF with the dita command&lt;/description>
    &lt;property name="absolute.path.base" location="../"/>
    &lt;dita-cmd
      input="${absolute.path.base}/sequence.ditamap"
      format="htmlhelp"
      propertyfile="${absolute.path.base}/properties/chm.properties"
    />
    &lt;dita-cmd
      input="${absolute.path.base}/taskbook.ditamap"
      format="pdf"
      propertyfile="${absolute.path.base}/properties/pdf.properties"
    />
  &lt;/target>
  &lt;target name="post">
    &lt;description>Postprocessing steps&lt;/description>
  &lt;/target>
&lt;/project></codeblock>
      </p>
    </example>
  </taskbody>
</task>
